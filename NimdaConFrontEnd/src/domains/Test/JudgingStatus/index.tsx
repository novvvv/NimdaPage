import NavBar from "@/components/Layout/Header/NavBar";
import { useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";
import { submitCodeAPI } from "@/api/judge";

interface JudgeStatus {
  status: 'JUDGING' | 'ACCEPTED' | 'WRONG_ANSWER' | 'COMPILATION_ERROR' | 'TIME_LIMIT_EXCEEDED' | 'RUNTIME_ERROR' | 'SYSTEM_ERROR';
  message?: string;
  executionTime?: number;
  score?: number;
  errorOutput?: string;
  memoryUsage?: number;
  submittedBy?: string;
}

function JudgingStatusPage() {
  const navigate = useNavigate();
  const location = useLocation();
  const [judgeStatus, setJudgeStatus] = useState<JudgeStatus>({ status: 'JUDGING' });
  const [dots, setDots] = useState('');

  // URL ÌååÎùºÎØ∏ÌÑ∞ÏóêÏÑú Ï†úÏ∂ú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
  const submissionData = location.state?.submissionData;

  useEffect(() => {
    // Ï†úÏ∂ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Î¨∏Ï†ú Ï†úÏ∂ú ÌéòÏù¥ÏßÄÎ°ú Î¶¨Îã§Ïù¥Î†âÌä∏
    if (!submissionData) {
      navigate('/problem-submit');
      return;
    }

    // Ï±ÑÏ†ê Ï§ë Ïï†ÎãàÎ©îÏù¥ÏÖò (Ï†ê 3Í∞ú Î∞òÎ≥µ)
    const dotInterval = setInterval(() => {
      setDots(prev => {
        if (prev === '...') return '';
        return prev + '.';
      });
    }, 500);

    // Ïã§Ï†ú Ï±ÑÏ†ê API Ìò∏Ï∂ú
    const performJudging = async () => {
      try {
        // ÏÉàÎ°úÏö¥ judge API ÏÇ¨Ïö© (ÌÜ†ÌÅ∞ ÏûêÎèô Ìè¨Ìï®)
        const result = await submitCodeAPI(submissionData);
        
        // Ï±ÑÏ†ê ÏôÑÎ£å ÌõÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        setTimeout(() => {
          clearInterval(dotInterval);
          
          if (result.success && result.result) {
            const judgeResult = result.result;
            setJudgeStatus({
              status: judgeResult.status as any,
              message: judgeResult.message,
              executionTime: judgeResult.executionTime,
              score: judgeResult.score,
              errorOutput: judgeResult.errorOutput,
              memoryUsage: judgeResult.memoryUsage,
              submittedBy: result.submittedBy
            });
          } else {
            setJudgeStatus({
              status: 'SYSTEM_ERROR',
              message: result.message
            });
          }
        }, 2000); // ÏµúÏÜå 2Ï¥à ÎåÄÍ∏∞ (Ï±ÑÏ†ê Ï§ë ÎäêÎÇåÏùÑ ÏúÑÌï¥)
        
      } catch (error) {
        clearInterval(dotInterval);
        setJudgeStatus({
          status: 'SYSTEM_ERROR',
          message: 'Ï±ÑÏ†ê ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§.'
        });
      }
    };

    performJudging();

    return () => clearInterval(dotInterval);
  }, [submissionData, navigate]);

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'JUDGING': return 'text-blue-600';
      case 'ACCEPTED': return 'text-green-600';
      case 'WRONG_ANSWER': return 'text-red-600';
      case 'COMPILATION_ERROR': return 'text-orange-600';
      case 'TIME_LIMIT_EXCEEDED': return 'text-purple-600';
      case 'RUNTIME_ERROR': return 'text-red-500';
      case 'SYSTEM_ERROR': return 'text-gray-600';
      default: return 'text-gray-600';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'JUDGING': return 'Ï±ÑÏ†ê Ï§ë';
      case 'ACCEPTED': return 'ÎßûÏïòÏäµÎãàÎã§!!';
      case 'WRONG_ANSWER': return 'ÌãÄÎ†∏ÏäµÎãàÎã§';
      case 'COMPILATION_ERROR': return 'Ïª¥ÌååÏùº ÏóêÎü¨';
      case 'TIME_LIMIT_EXCEEDED': return 'ÏãúÍ∞Ñ Ï¥àÍ≥º';
      case 'RUNTIME_ERROR': return 'Îü∞ÌÉÄÏûÑ ÏóêÎü¨';
      case 'SYSTEM_ERROR': return 'ÏãúÏä§ÌÖú ÏóêÎü¨';
      default: return 'Ïïå Ïàò ÏóÜÏùå';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'JUDGING': return '‚è≥';
      case 'ACCEPTED': return 'üéâ';
      case 'WRONG_ANSWER': return '‚ùå';
      case 'COMPILATION_ERROR': return 'üî®';
      case 'TIME_LIMIT_EXCEEDED': return '‚è∞';
      case 'RUNTIME_ERROR': return 'üí•';
      case 'SYSTEM_ERROR': return '‚ö†Ô∏è';
      default: return '‚ùì';
    }
  };

  const goBack = () => {
    navigate('/problem-submit');
  };

  const goToHome = () => {
    navigate('/');
  };

  return (
    <>
      <NavBar />
      <div 
        className="min-h-screen bg-white"
        style={{ paddingTop: '64px' }}
      >
        <div className="container mx-auto px-4 py-6">
          <div className="max-w-6xl mx-auto">
            {/* Ìó§Îçî */}
            <div className="flex items-center justify-between mb-6">
              <h1 className="text-2xl font-bold text-black">Ï†úÏ∂ú ÌòÑÌô©</h1>
              <button 
                onClick={goBack}
                className="text-gray-600 hover:text-black text-sm font-medium"
              >
                ‚Üê Î¨∏Ï†úÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
              </button>
            </div>

            {/* ÌÖåÏù¥Î∏î */}
            <div className="bg-white border border-gray-300">
              {/* ÌÖåÏù¥Î∏î Ìó§Îçî */}
              <div className="border-b border-gray-300 bg-gray-50">
                <div className="grid grid-cols-8 gap-4 px-4 py-3 text-sm font-medium text-black">
                  <div className="text-center">#</div>
                  <div className="text-center">When</div>
                  <div className="text-center">Who</div>
                  <div className="text-center">Problem</div>
                  <div className="text-center">Lang</div>
                  <div className="text-center">Verdict</div>
                  <div className="text-center">Time</div>
                  <div className="text-center">Memory</div>
                </div>
              </div>

              {/* ÌÖåÏù¥Î∏î Î∞îÎîî */}
              <div className="divide-y divide-gray-200">
                <div className="grid grid-cols-8 gap-4 px-4 py-3 text-sm hover:bg-gray-50">
                  <div className="text-center text-blue-600 font-medium">
                    {Date.now().toString().slice(-6)}
                  </div>
                  <div className="text-center text-gray-600">
                    {new Date().toLocaleDateString('en-US', { 
                      month: 'short', 
                      day: '2-digit', 
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </div>
                  <div className="text-center font-medium text-black">
                    {judgeStatus.submittedBy || 'ÏÇ¨Ïö©Ïûê'}
                  </div>
                  <div className="text-center">
                    <span className="text-blue-600 hover:underline cursor-pointer">
                      {submissionData?.title || 'A + B'}
                    </span>
                  </div>
                  <div className="text-center text-gray-600">
                    {submissionData?.language || 'Java'}
                  </div>
                  <div className="text-center">
                    {judgeStatus.status === 'JUDGING' && (
                      <span className="text-gray-600">
                        Ï±ÑÏ†ê Ï§ë{dots}
                      </span>
                    )}
                    {judgeStatus.status === 'ACCEPTED' && (
                      <span className="text-green-600 font-medium">Accepted</span>
                    )}
                    {judgeStatus.status === 'WRONG_ANSWER' && (
                      <span className="text-red-600 font-medium">Wrong answer</span>
                    )}
                    {judgeStatus.status === 'COMPILATION_ERROR' && (
                      <span className="text-orange-600 font-medium">Compilation error</span>
                    )}
                    {judgeStatus.status === 'TIME_LIMIT_EXCEEDED' && (
                      <span className="text-purple-600 font-medium">Time limit exceeded</span>
                    )}
                    {judgeStatus.status === 'RUNTIME_ERROR' && (
                      <span className="text-red-500 font-medium">Runtime error</span>
                    )}
                    {judgeStatus.status === 'SYSTEM_ERROR' && (
                      <span className="text-gray-600 font-medium">System error</span>
                    )}
                  </div>
                  <div className="text-center text-gray-600">
                    {judgeStatus.status === 'JUDGING' ? '0 ms' : `${judgeStatus.executionTime || 0} ms`}
                  </div>
                  <div className="text-center text-gray-600">
                    {judgeStatus.status === 'JUDGING' ? '0 KB' : `${Math.floor((judgeStatus.memoryUsage || 0) / 1024)} KB`}
                  </div>
                </div>
              </div>
            </div>

            {/* ÏÉÅÏÑ∏ Ï†ïÎ≥¥ (Ï±ÑÏ†ê ÏôÑÎ£å ÌõÑ) */}
            {judgeStatus.status !== 'JUDGING' && (
              <div className="mt-6 bg-white border border-gray-300">
                <div className="border-b border-gray-300 bg-gray-50 px-4 py-3">
                  <h3 className="text-lg font-medium text-black">Ï±ÑÏ†ê Í≤∞Í≥º ÏÉÅÏÑ∏</h3>
                </div>
                <div className="p-4">
                  {judgeStatus.status === 'ACCEPTED' && (
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-gray-600">ÏÉÅÌÉú:</span>
                        <span className="text-green-600 font-medium">Ï†ïÎãµÏûÖÎãàÎã§!</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Ïã§Ìñâ ÏãúÍ∞Ñ:</span>
                        <span className="text-black">{judgeStatus.executionTime}ms</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-gray-600">Ï†êÏàò:</span>
                        <span className="text-black font-medium">{judgeStatus.score}Ï†ê</span>
                      </div>
                    </div>
                  )}

                  {judgeStatus.message && judgeStatus.status !== 'ACCEPTED' && (
                    <div className="space-y-2">
                      <div>
                        <span className="text-gray-600 font-medium">Ïò§Î•ò Î©îÏãúÏßÄ:</span>
                        <div className="mt-1 p-2 bg-gray-100 border border-gray-300 text-sm font-mono">
                          {judgeStatus.message}
                        </div>
                      </div>
                    </div>
                  )}

                  {judgeStatus.errorOutput && (
                    <div className="mt-4">
                      <span className="text-gray-600 font-medium">ÏÉÅÏÑ∏ Ïò§Î•ò:</span>
                      <pre className="mt-1 p-2 bg-gray-100 border border-gray-300 text-sm font-mono whitespace-pre-wrap">
                        {judgeStatus.errorOutput}
                      </pre>
                    </div>
                  )}
                </div>
              </div>
            )}

            {/* Ïï°ÏÖò Î≤ÑÌäº */}
            <div className="flex gap-4 mt-6">
              <button
                onClick={goBack}
                className="bg-black text-white px-6 py-2 text-sm font-medium hover:bg-gray-800 transition-colors"
              >
                Îã§Ïãú Ï†úÏ∂úÌïòÍ∏∞
              </button>
              <button
                onClick={goToHome}
                className="bg-gray-600 text-white px-6 py-2 text-sm font-medium hover:bg-gray-700 transition-colors"
              >
                Î©îÏù∏ÏúºÎ°ú Í∞ÄÍ∏∞
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default JudgingStatusPage;
